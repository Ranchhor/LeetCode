class Solution {
public:
    
    bool dfs(vector<int> &sides, vector<int> nums, int index, int target) {
        if(index == nums.size()) {
            return (sides[0] == sides[1] && sides[1] == sides[2] && sides[2] == sides[3]);
        }
        
        for(int i=0; i<4; i++) {
            if(sides[i] + nums[index] > target) continue;
            sides[i] += nums[index];
            if(dfs(sides,nums,index+1,target)) {
                return true;        
            }
            
            sides[i] -= nums[index];
        }
        
        return false;
    }
    
    bool makesquare(vector<int>& nums) {
        if(nums.empty()) return false;
        int sum = 0;
        for(int ele: nums) sum += ele;
        vector<int> fourSides(4,0);
        if(sum%4 != 0) return false;
        sort(nums.begin(),nums.end(),greater<int>());
        return dfs(fourSides,nums,0,sum/4);
    }
};

//https://leetcode.com/problems/matchsticks-to-square/discuss/95744/cpp-6ms-solution-with-DFS