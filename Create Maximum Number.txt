class Solution {
public:
    
    vector<int> maxNumber(vector<int>nums, int k) {
        vector<int> res;
        int drop = nums.size()-k;
        for(int num: nums) {
            while(drop>0 && res.size() && res.back() < num) {
                res.pop_back();
                drop--;
            }
            res.push_back(num);
        }
        res.resize(k);
        return res;
    }
    
    vector<int> maxNumber(vector<int> nums1, vector<int> nums2) {
        auto it1 = nums1.begin(), end1 = nums1.end();
        auto it2 = nums2.begin(), end2 = nums2.end();
        vector<int> res;
        while(it1 != end1 || it2 != end2) {
            res.push_back(lexicographical_compare(it1,end1,it2,end2) ? *it2++ : *it1++); 
        }
        return res;
    }
    
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
        vector<int> ans;
        int n = nums1.size(), m = nums2.size();
        for(int i=max(k-m,0); i<=min(k,n); i++) {
            ans = max(ans, maxNumber(maxNumber(nums1,i),maxNumber(nums2,k-i)));
        }
        return ans;
    }
};